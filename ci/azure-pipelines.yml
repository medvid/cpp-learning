trigger:
- master

jobs:
- job: build_linux
  displayName: Linux build

  pool:
    vmImage: ubuntu-20.04

  steps:
  - script: |
      sudo apt update -qq
      sudo apt install -y apt-transport-https ca-certificates gnupg software-properties-common --no-install-recommends
      wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
      sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
      sudo apt update -qq
      sudo apt install -y libc6:i386 libstdc++:i386 cmake ninja-build clang lld libc++-dev libc++abi-dev
      cmake --version
      ninja --version
      gcc --version
      clang --version
      lld --version
    displayName: "Install prerequisites"

  - script: |
      cmake -S . -B build/gcc-x64 -G "Ninja Multi-Config" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      cd build/gcc-x64
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "GCC x64 build"

  - script: |
      cmake -S . -B build/gcc-x32 -G "Ninja Multi-Config" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS="-m32 -Wall -Wextra -Werror"
      cd build/gcc-x32
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "GCC x32 build"
    
  - script: |
      cmake -S . -B build/clang-x64 -G "Ninja Multi-Config" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_LINKER=lld -DCMAKE_CXX_FLAGS="-stdlib=libc++ -Wall -Wextra -Werror" -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++"
      cd build/clang-x64
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "Clang x64 build"


- job: build_windows
  displayName: Windows build

  pool:
    vmImage: windows-2019

  steps:
  - script: |
      cmake -S . -B build/msvc2019-x64 -G "Visual Studio 16 2019" -A x64
      cd build/msvc2019-x64
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "MSVC++ 2019 x64 build"

  - script: |
      cmake -S . -B build/msvc2019-x32 -G "Visual Studio 16 2019" -A Win32
      cd build/msvc2019-x32
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "MSVC++ 2019 x32 build"


- job: build_macos
  displayName: MacOS build

  pool:
    vmImage: macos-10.14

  steps:
  - script: |
      cmake -S . -B build/xcode -G "Xcode"
      cd build/xcode
      cmake --build . --config Debug
      ctest --config Debug --verbose
      cmake --build . --config Release
      ctest --config Release --verbose
    displayName: "Xcode build"
